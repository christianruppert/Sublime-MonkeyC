%YAML 1.2
---
name: MonkeyC
file_extensions:
  - mc
first_line_match: ^\s*using\s+Toybox\b.*$\n?
scope: source.mc

variables:
  id_start: '[[:alpha:]_]'
  identifier: '\b{{id_start}}[[:alnum:]_]*\b'

contexts:
  comments:
    - match: \/\/
      scope: punctuation.definition.comment.mc
      push:
        - meta_scope: comment.line.mc
        - match: '$'
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.mc
      push:
        - meta_scope: comment.block.mc
        - match: \*/
          pop: true


  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.mc
      push:
        - meta_scope: string.quoted.double.mc
        - match: \\.
          scope: constant.character.escape.mc
        - match: '"'
          scope: punctuation.definition.string.end.mc
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.mc
      push:
        - meta_scope: string.quoted.single.mc
        - match: \\.
          scope: constant.character.escape.mc
        - match: "'"
          scope: punctuation.definition.string.end.mc
          pop: true

  keywords:
    - match: '\b(if|else|for|while|switch|case|break|continue|default|do|try|catch|finally|return|throw)\b'
      scope: keyword.control.flow.mc
    - match: '\b(using|as)\b'
      scope: keyword.control.import.mc
    - match: '\b(instanceof|has|extends)\b'
      scope: keyword.operator.mc
    - match: '\b(var|const|enum)\b'
      scope: storage.type.mc
    - match: '\b(hidden|public|private|hidden|static)\b'
      scope: storage.modifier.mc
    - match: '\b(true|false|null|NaN)\b'
      scope: constant.language.mc
    - match: '\bnew\b'
      scope: meta.instance.constructor.mc keyword.control.new.mc


  operators:
    - match: '=>'
      scope: keyword.operator.assignment.mc
    - match: '&&|\|\|'
      scope: keyword.operator.logic.mc
    - match: '~|&|\||\^|>>|<<'
      scope: keyword.operator.bitwise.mc
    - match: '[<>]=?|[!=]='
      scope: keyword.operator.comparison.mc
    - match: '!'
      scope: keyword.operator.logic.mc
    - match: '\b(and|or)\b'
      scope: keyword.operator.word.mc
    - match: '(\+|\-|\*|\/|%)'
      scope: keyword.operator.arithmetic.mc
    - match: '='
      scope: keyword.operator.assignment.mc
    - match: '\?'
      scope: keyword.operator.other.mc

  string_symbols:
    - match: '(\b|\s*):{{identifier}}+\b'
      scope: constant.other.symbol.mc

  brackets:
    - match: \)
      pop: true
    - include: main

  numbers:
    - match: '\b(-)?([0-9]+\.[0-9]+[df]?)\b'
      scope: constant.numeric.float.mc
    - match: '\b(-)?([0-9]+l?)\b'
      scope: constant.numeric.integer.mc
    - match: '\b(-)?(0x[0-9a-fA-F]+l?)\b'
      scope: constant.numeric.hex.mc

  functions:
    # function definition
    - match: '\b((?:public|private|protected|static)\s+)*(function)\s+({{identifier}})'
      captures:
        1: storage.modifier.mc
        2: storage.type.function.mc
        3: entity.name.function.mc
      push:
        - meta_scope: meta.function.method.with-parameters.mc
        - include: comments
        - meta_content_scope: variable.parameter.function.mc
        - match: (?=\()
          set:
            - match: \(
              scope: meta.function.parameters.mc meta.group.mc punctuation.section.group.begin.mc
              set: function-parameters
          

    # function call
    - match: '[\b\.]({{identifier}}*)(\()'
      captures:
        1: variable.function.mc
        2: punctuation.definition.parameters.begin.mc punctuation.section.group.begin.mc
      push:
        - meta_scope: meta.function-call.mc
        - meta_content_scope: meta.function-call.parameters.mc
        - match: \)
          scope: punctuation.definition.parameters.end.mc punctuation.definition.group.end.mc
          pop: true
        - include: main

  function-parameters:
      - meta_content_scope: meta.function.parameters.mc meta.group.mc
      - match: '\)'
        scope: punctuation.definition.parameters.mc punctuation.section.group.end.mc
        set:
          - meta_content_scope: meta.function.mc
          - match: \{
            scope: meta.block.mc punctuation.section.block.begin.mc
            set: function-body
          # Exit on unexpected content
          - match: (?=\S)
            pop: true
      - include: comments
      - match: '{{identifier}}'
        scope: variable.parameter.function.mc
      - match: ','
        scope: punctuation.separator.mc
  function-body:
    - meta_content_scope: meta.function.mc meta.block.mc
    - match: \}
      scope: meta.function.mc meta.block.mc punctuation.section.block.end.mc
      pop: true
    - include: main


  oop:
    - match: '(class)\s+([a-zA-Z_]\w*)(\s*(extends)\s*([a-zA-Z_.]+))?\s*(\{)?'
      captures:
        1: storage.type.class.mc
        2: entity.name.type.class.mc
        4: keyword.operator.mc
        5: entity.other.inherited-class.mc
        6: punctuation.definition.class.mc
      push:
        - meta_scope: meta.class
        - match: \}
          pop: true
        - include: main

  provided:
    - match: '\b(Toybox\.)?System\.(print(ln)?|getTimer|getClockTime|getSystemStats|trap|exit|error)\b'
      scope: support.function.mc
    - match: '\b(Toybox\.)?Rez\.(Drawables|Strings|Fonts)\b'
      scope: support.class.mc
    - match: '\bmethod\b'
      scope: support.function.mc
    - match: '\b(Toybox|Activity(Monitor|Recording)?|Ant(Plus)?|Application|Attention|Background|Communications|FitContributor|Graphics|Lang|Math|PersistedLocations|Position|Sensor(History|Logging)?|StringUtil|System|Test|Time(r)?|UserProfile|WatchUi|Rez)\b'
      scope: support.class.mc meta.path.mc

  separators:
    - match: '\.'
      scope: punctuation.separator.mc
    - match: ';'
      scope: punctuation.terminator.mc


  modules:
    - match: '\b(\([:\w]+\))?\s*(module)\s*(\w+)\s*'
      captures:
        1: label
        2: entity.name.namespace.mc storage.type.module.mc
        3: entity.type.namespace.mc
      push: module-definition
  module-definition:
    - meta_scope: meta.namespace.mc
    - match: '\{'
      scope: meta.block.mc punctuation.section.block.mc
    - match: \}
      pop: true
    - include: main

  enums:
    - match: '\benum\s*\{'
      push:
        - meta_scope: meta.block.mc
        - match: '\}'
          pop: true
  arrays:
    - match: '\['
      scope: punctuation.section.array.begin.mc
      push:
        - meta_scope: meta.array.mc
        - match: '\]'
          scope: punctuation.section.array.end.mc
          pop: true
        - include: main
  dicts:
    - match: '\{'
      push:
        - meta_scope: meta.block.dict.mc
        - match: '\}'
          pop: true
        - include: main

  block-types:
    - include: enums
    - include: arrays
    - include: dicts


  main:
    - include: keywords
    - include: functions
    - include: oop
    - include: comments
    - include: chars
    - include: strings
    - include: numbers
    - include: operators
    - include: string_symbols
    - include: provided
    - include: separators
    - include: block-types
    - include: modules
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.illegal.stray-bracket-end




###special system functions?
# method
# Rez: http://developer.garmin.com/connect-iq/programmers-guide/resource-compiler/